/*
Copyright IBM Corp. 2016 All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

		 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Modifications to file:
https://github.com/rleonardco/fabric-0.6/blob/ae0318ac74705c253629e6a48ce32bf6ef788a88/protos/fabric.proto
copyright (C) 2018 by repChain 

*/


syntax = "proto3";

option java_package = "jblock.protos";
import "google/protobuf/timestamp.proto";

/*-------for test only----------*/
message Book{
	 string name = 1;
}

/*
*/
//Event 用于图形展示的事件
message Event {
    //来源addr
    string from = 1;
    //发送addr，如果是广播（需要定义一个）
    string to = 2;
    //event事件
    enum Action {
        SUBSCRIBE_TOPIC = 0;
        TRANSACTION = 1;
        BLOCK_NEW = 2;
        BLOCK_ENDORSEMENT = 3;
        ENDORSEMENT = 4;
        MEMBER_UP = 5;
        MEMBER_DOWN = 6;
        CANDIDATOR = 7;
        GENESIS_BLOCK = 8;
        BLOCK_SYNC = 9;
        BLOCK_SYNC_DATA = 10;
        BLOCK_SYNC_SUC = 11;
    }
    Action action = 3;
    Block blk = 4;
}
//背书，可用于Transaction和Block
message Endorsement {
	// Identity of the endorser (e.g. its certificate)
    //目前将其改为cert对应公钥的短地址，为了减少数据大小
	bytes endorser = 1;
	// Signature of the payload included in ProposalResponse concatenated with
	// the endorser's certificate; ie, sign(ProposalResponse.payload + endorser)
	bytes signature = 2;
}

//ChaincodeID contains the path as specified by the deploy transaction
//that created it as well as the hashCode that is generated by the
//system for the path. From the user level (ie, CLI, REST API and so on)
//deploy transaction is expected to provide the path and other requests
//are expected to provide the hashCode. The other value will be ignored.
//Internally, the structure could contain both values. For instance, the
//hashCode will be set when first generated using the path
message ChaincodeID {
    //deploy transaction will use the path
    //不太清楚？
    string path = 1;
    //all other requests will use the name (really a hashcode) generated by
    //the deploy transaction
    string name = 2;
}
// Carries the chaincode function and its arguments.
message ChaincodeInput {
    string function = 1;
    repeated string args  = 2;
}
// Carries the chaincode specification. This is the actual metadata required for
// defining a chaincode.
message ChaincodeSpec {
	//Type only support javascript 
    ChaincodeID chaincodeID = 1;
    ChaincodeInput ctorMsg = 2;
    int32 timeout = 3;
    //绑定用户名（唯一的标识id）
    string secureContext = 4;
    //for ChaincodeDeploymentSpec
    //完整的代码内容（chaincode具体实现）
    bytes code_package = 5;
    enum CodeType {
	CODE_UNDEFINED = 0;
        CODE_JAVASCRIPT = 1;
        CODE_SCALA = 2;
    }
    CodeType ctype = 6;
}

/*
*ChaincodeMessage并不是用于peer之间，而是用于a validating peer and its chaincodes 
*abx中chaincode的sandbox封装为本地actor内实例化js引擎，不存在分布式调用，因此ChaincodeMessage不需要
*/

// Confidentiality Levels
enum ConfidentialityLevel {
    LEVEL_UNDEFINED = 0;
    PUBLIC = 1;
    CONFIDENTIAL = 2;
}
/*
* 交易
*/
message Transaction {
    enum Type {
        UNDEFINED = 0;
        // deploy a chaincode to the network and call `Init` function
        CHAINCODE_DEPLOY = 1;
        // call a chaincode `Invoke` function as a transaction
        CHAINCODE_INVOKE = 2;
        // call a chaincode `query` function
        CHAINCODE_QUERY = 3;
        // terminate a chaincode; not implemented yet
        CHAINCODE_TERMINATE = 4;
    }
    Type type = 1;
    //store ChaincodeID as bytes so its encrypted value can be stored
    bytes chaincodeID = 2;
    //bytes payload = 3;
    //repeated ChaincodeSpec payload=3;
    ChaincodeSpec payload=3;
    bytes metadata = 4;
    //hash
    string txid = 5;
    google.protobuf.Timestamp timestamp = 6;

    ConfidentialityLevel confidentialityLevel = 7;
    string confidentialityProtocolVersion = 8;
    bytes nonce = 9;

    bytes toValidators = 10;
    //目前将其改为cert对应公钥的短地址，为了减少数据大小
    bytes cert = 11;
    bytes signature = 12;
}

message Block {
    // version - Version used to track any protocol changes.
    uint32 version = 1;
    // timestamp - The time at which the block or transaction order was proposed.
    //This may not be used by all consensus modules.
    //背书时间
    google.protobuf.Timestamp timestamp = 2;
    // transactions - The ordered list of transactions in the block.
    repeated Transaction transactions = 3;
    // stateHash - The state hash after running transactions in this block.
    // worldstate hash
    bytes stateHash = 4;
    // previousBlockHash - The hash of the previous block in the chain.
    //pre block statehash
    bytes previousBlockHash = 5;
    // consensusMetadata - Consensus modules may optionally store any
    // additional metadata in this field.
    //用来保存背书的
    //bytes consensusMetadata = 6;
    repeated Endorsement consensusMetadata=6;
    // nonHashData - Data stored with the block, but not included in the blocks
    // hash. This allows this data to be different per peer or discarded without
    // impacting the blockchain.
    NonHashData nonHashData = 7;
}

// NonHashData is data that is recorded on the block, but not included in
// the block hash when verifying the blockchain.
// localLedgerCommitTimestamp - The time at which the block was added
// to the ledger on the local peer.
message NonHashData {
    //添加链的时间，正式出块时间
  google.protobuf.Timestamp localLedgerCommitTimestamp = 1;
  //背书中各个交易预执行结果
  repeated TransactionResult transactionResults = 2;
}
//交易执行增量日志
message OperLog{
	string key =1;
	bytes oldValue =2;
	bytes newValue=3;
}
//交易结果(背书中针对各个交易再进行单独背书)
//背书请求的应答（针对block中的各个交易）
message TransactionResult {
    //唯一标识一个Transaction
  string txid = 1;
    // result - The return value of the transaction.
  repeated OperLog ol = 2;
    // errorCode - An error code. 5xx will be logged as a failure in the dashboard.
  uint32 errorCode = 3;
    // error - An error string for logging an issue.
  string error = 4;
}

message BlockChain {
    repeated Block block = 1;
}

message BlockchainInfo {
    uint64 height = 1;
    uint64 totalTransactions = 2;
    bytes  currentBlockHash = 3;
    bytes  previousBlockHash = 4;
    bytes  currentWorldStateHash = 5;
}

